from apkcollector import debug
import json
import psycopg2
import re
from src.malware_labels_dic import malware_labels
from db.config import config

def obtainEngineNameList(file):
    try:
        with open(file, 'r') as file:
            engineList = []
            for line in file:
                scan_results = json.loads(line)
                for item in scan_results.keys():
                    if item not in engineList:
                        engineList.append(item)

            print (engineList)
            return engineList
    except Exception as t_e:
        print(t_e)

def insert_results(hash, scan_result):
    
        sql = """INSERT INTO multi_labeling(hash_id, engine, malware, number, nmalware)
              VALUES(%s,%s,%s,%s,%s);"""

        delimiters = "/", ".", " ", ",", "_", ":", "(", ")", "!", "-", "[", "]", "@", "#", ";"
        regexPattern = '|'.join(map(re.escape, delimiters))
        av = []
        s = 0
        malware_list = dict()
        for item in scan_result:
            result = scan_result[item]["result"]
            if(result != None):
                malware_list_bool = dict()
                av.append(scan_result[item]["engine_name"])
                s+=1
                result = result.upper()
                vulnlist = re.split(regexPattern, result)
                for vuln in vulnlist:
                    if vuln in malware_labels.keys():
                        for label in malware_labels[vuln]:
                            if label not in malware_list_bool:
                                if label not in malware_list.keys():
                                    malware_list[label]=1
                                    malware_list_bool[label]=True
                                else:
                                    malware_list[label]+=1
                                    malware_list_bool[label]=True

        if malware_list:
            try:
                params = config()
                conn = psycopg2.connect(**params)
                cursor = conn.cursor()
                #print(hash, av, json.dumps(malware_list), s, len(malware_list))
                cursor.execute(sql, (hash, av, json.dumps(malware_list), s, len(malware_list)))
                conn.commit()
                cursor.close()
                conn.close()
            except (Exception, psycopg2.Error) as error:
                print("Error while fetching data from PostgreSQL", error)

            finally:
                if conn:
                    cursor.close()
                    conn.close()


            #print("AV={} y son {} - {}".format(s, av, malware_list))
            av.clear()

        

def results():
    try:
        params = config()
        conn = psycopg2.connect(**params)
        cursor = conn.cursor()
        postgreSQL_select_Query = "select scan_result, hash_id from vt"
        sql = """INSERT INTO multi_labeling(hash_id, engine, malware, number, nmalware)
              VALUES(%s,%s,%s,%s,%s);"""
        #update_sql = """Update multi_labeling set nmalware = %s where malware = %s"""

        cursor.execute(postgreSQL_select_Query)

        delimiters = "/", ".", " ", ",", "_", ":", "(", ")", "!", "-", "[", "]", "@", "#", ";"
        regexPattern = '|'.join(map(re.escape, delimiters))
        n = 0
        s = 0
        av = []
        for row in cursor:
            s = 0
            resultados = dict()
            malware_list = dict()
            for item in row[0]:
                result = row[0][item]["result"]
                if(result != None):
                    malware_list_bool = dict()
                    av.append(row[0][item]["engine_name"])
                    s+=1
                    result = result.upper()
                    vulnlist = re.split(regexPattern, result)
                    for vuln in vulnlist:
                        if vuln in malware_labels.keys():
                            for label in malware_labels[vuln]:
                                if label not in malware_list_bool:
                                    if label not in malware_list.keys():
                                        malware_list[label]=1
                                        malware_list_bool[label]=True
                                    else:
                                        malware_list[label]+=1
                                        malware_list_bool[label]=True

            if malware_list:
                conn2 = psycopg2.connect(**params)
                cursor2 = conn2.cursor()
                print (row[1], av, json.dumps(malware_list), s, len(malware_list))
                cursor2.execute(sql, (row[1], av, json.dumps(malware_list), s, len(malware_list)))
                conn2.commit()
                cursor2.close()
                conn2.close()

                resultados[n]=malware_list
                n+=1
                print("AV={} y son {} - {}".format(s, av, resultados))
                av.clear()
                
    except (Exception, psycopg2.Error) as error:
        print("Error while fetching data from PostgreSQL", error)

    finally:
        if conn:
            cursor.close()
            conn.close()
            print("PostgreSQL connection is closed")


def total_vulns():
    try:
        params = config()
        conn = psycopg2.connect(**params)
        cursor = conn.cursor()
        postgreSQL_select_Query = "select scan_result from vt"

        cursor.execute(postgreSQL_select_Query)

        delimiters = "/", ".", " ", ",", "_", ":", "(", ")", "!", "-", "[", "]", "@", "#", ";"
        regexPattern = '|'.join(map(re.escape, delimiters))
        n = 0
        s = 0
        y = 0
        for row in cursor:
            output = set()
            output2 = set()
            for item in row[0]:
                result = row[0][item]["result"]
                if(result != None):
                    result = result.upper()
                    output2.add(result)
                    vulnlist = re.split(regexPattern, result)
                    for vuln in vulnlist:
                        if vuln in malware_labels.keys():
                            output.add(result)

            if output:
                n+=1
            if output2:
                y+=1
            if output2 and not output:
                print(output2)
            s+=1
        print("---------------------------------------------------------")
        print("The above tags are not detected with the dictionary used.")
        print("Total: ", s)
        print("Total no None: ", y)
        print("Tagged: ", n)
    except (Exception, psycopg2.Error) as error:
        print("Error while fetching data from PostgreSQL", error)

    finally:
        if conn:
            cursor.close()
            conn.close()

def results_compare():
    try:
        params = config()
        conn = psycopg2.connect(**params)
        cursor = conn.cursor()
        postgreSQL_select_Query = "select scan_result from vt"

        cursor.execute(postgreSQL_select_Query)

        delimiters = "/", ".", " ", ",", "_", ":", "(", ")", "!", "-", "[", "]", "@", "#", ";"
        regexPattern = '|'.join(map(re.escape, delimiters))
        n = 0
        s = 0
        y = 0
        for row in cursor:
            s = 0
            resultados = dict()
            malware_list = dict()
            for item in row[0]:
                result = row[0][item]["result"]
                if(result != None):
                    malware_list_bool = dict()
                    s+=1
                    result = result.upper()
                    print("{} - {}".format(row[0][item]["engine_name"], result))
                    #print(result)
                    vulnlist = re.split(regexPattern, result)
                    for vuln in vulnlist:
                        if vuln in malware_labels.keys():
                            for label in malware_labels[vuln]:
                                if label not in malware_list_bool:
                                    if label not in malware_list.keys():
                                        malware_list[label]=1
                                        malware_list_bool[label]=True
                                    else:
                                        malware_list[label]+=1
                                        malware_list_bool[label]=True

            if malware_list:
                resultados[n]=malware_list
                n+=1
                print(n)

        postgreSQL_select_Query = "select hash_id from vt"
        cursor.execute(postgreSQL_select_Query)
        for row in cursor:
            print(row[0])
            y+=1
            print(y)

    except (Exception, psycopg2.Error) as error:
        print("Error while fetching data from PostgreSQL", error)

    finally:
        if conn:
            cursor.close()
            conn.close()
            print("PostgreSQL connection is closed")


if __name__ == '__main__':
    results()
    #total_vulns()
    #results_compare()