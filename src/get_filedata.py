import hashlib
import sys
import time
import os


pwd = os.path.dirname(os.path.realpath(__file__))
now = time.strftime("%a %b %d %H:%M:%S %Z %Y")

# Set paths
log_file = '{0}/../logs/apkcollector.log'.format(pwd)      # Linux
#log_file = '{0}\\..\\logs\\apkcollector.log'.format(pwd)   # Windows


def get_hashing_algorithm(default_algorithm):
    algorithm_list = hashlib.algorithms_available
    if default_algorithm not in algorithm_list:
        sys.stderr.write("ERROR: Available algorithms are {0}.".format(', '.join(algorithm_list)))

    try:
        return hashlib.new(default_algorithm)
    except Exception as a:
        print(a)
        exit()


def get_hash(filename, default_algorithm = 'sha1'):
    hashing = get_hashing_algorithm(default_algorithm)

    try:
        with open(filename, 'rb') as f:
            for chunk in iter(lambda: f.read(65536), b''):
                hashing.update(chunk)

    except (IOError, OSError) as err:
        print (err)
        return None

    return hashing.hexdigest()

def get_size(filename):
    return os.path.getsize(filename)

def get_name(filename):
    return os.path.basename(filename)

def get_realpath(filename):
    return os.path.realpath(filename)

def get_last_modification_date(filename):
    return time.ctime(os.path.getmtime(filename))

def convert_bytes(num):
    # This function will convert bytes to KB... MB... etc
    for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:
        if num < 1024.0:
            return "%3.1f %s" % (num, x)
        num /= 1024.0

def get_file_data(filename, algorithm = None):
    file = {}

    if algorithm:
        algorithms = [algorithm]
    else:
        algorithms = ['md5', 'sha1', 'sha256']

    for algorithm in algorithms:
        file[algorithm] = get_hash(filename, algorithm)

    file["hash"] = file["sha256"]
    file["name"] = get_name(filename)
    file["realpath"] = get_realpath(filename)
    file["size"] = get_size(filename)
    file["readable_size"] = convert_bytes(get_size(filename))
    file["date"] = get_last_modification_date(filename)
    return file




