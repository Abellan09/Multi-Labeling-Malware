import os
import sys
import requests
import getopt
from urllib3.util.retry import Retry
from src.get_filedata import get_file_data
from requests.adapters import HTTPAdapter
import psycopg2
from db.config import config


def usage():
    print("Max arguments: 2")
    print("API Key (-k) and at least 1 and a list of hashes values or apks paths (-l)")
    print("Usage: " + sys.argv[0] + " [OPTIONS]")
    print("Example: " + sys.argv[0] + " " + \
    "-k [api key] -l [list of hashes and apks]")
    return

def is_hex(s):
    try:
        int(s, 16)
        return True
    except ValueError:
        return False

def insert_file_data(data):
    sql = """INSERT INTO file(hash_id, name, realpath, size, date) VALUES(%s,%s,%s,%s,%s);"""

    conn = None
    DB_error = 0
    try:
        params = config()
        conn = psycopg2.connect(**params)
        cur = conn.cursor()
        # execute the INSERT statement
        cur.execute(sql, (data["hash"], data["name"], data["realpath"], data["size"], data["date"]))
        conn.commit()
        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
        DB_error = 1
    finally:
        if conn is not None:
            conn.close()
        return DB_error

def insert_hash_file(data):
    sql = """INSERT INTO file(hash_id) VALUES(%s);"""

    conn = None
    DB_error = 0
    try:
        params = config()
        conn = psycopg2.connect(**params)
        cur = conn.cursor()
        # execute the INSERT statement
        cur.execute(sql, (data,))
        conn.commit()
        cur.close()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
        DB_error = 1
    finally:
        if conn is not None:
            conn.close()
        return DB_error


def api_request(key, q):
    url = "https://www.virustotal.com/api/v3/files"
    pwd = os.path.dirname(os.path.realpath(__file__))
    log_file = '{0}/../logs/request_response.log'.format(pwd)
    hashr_file = '{0}/../logs/hashes_retry.log'.format(pwd)

    try:
        filehash = q
        s = requests.Session()

        retries = Retry(total = 4,
                backoff_factor = 4.1,
                status_forcelist = [ 429, 500, 502, 503, 504 ])
        s.mount('https://', HTTPAdapter(max_retries = retries))
        response = s.get(url+'/'+filehash, headers = {"x-apikey": key})
        if response.status_code == 200:
            print("Request successful")
            log = open(log_file, 'a')
            log.write('\n'+f"Request successful {filehash}")
            log.close()
            jsonresp = response.json()
        elif response.status_code == 429:
            print("Request not successful. Status code: ", response.status_code)
            log = open(log_file, 'a')
            log.write('\n'+f"Request not successful {filehash}")
            log.write(f". Status code: {response.status_code}" )
            log.close()
            hash_retry = open(hashr_file, 'a')
            hash_retry.write('\n'+f"{filehash}")
            hash_retry.close()
            jsonresp = None
        else:
            print("Request not successful. Status code: ", response.status_code)
            log = open(log_file, 'a')
            log.write('\n'+f"Request not successful {filehash}")
            log.write(f". Status code: {response.status_code}" )
            log.close()
            jsonresp = None

        return jsonresp
    except requests.exceptions.ConnectionError as e:
        print("Request for filehash '" +filehash+ "' failed")
        print(e.args)
        return None
    except requests.exceptions.HTTPError as e:
        print("Request for filehash '" +filehash+ "' failed")
        print(e.args)
        return None
    except requests.exceptions.Timeout as e:
        print("Request for filehash '" +filehash+ "' failed")
        print(e.args)
        return None
    except KeyboardInterrupt as e:
        print("Request for filehash '" +filehash+ "' failed")
        print(e.args)
        return None
    except requests.exceptions.RequestException as e:
        print("Request for filehash '" +filehash+ "' failed")
        print(e.args)
        log = open(log_file, 'a')
        log.write('\n'+f"FAIL: {e.args}")
        log.close()
        hash_retry = open(hashr_file, 'a')
        hash_retry.write('\n'+f"{filehash}")
        hash_retry.close()
        return None


def vtotal(key, filehash):
    DB_error = 0
    if filehash:
        try:
            if os.path.isfile(filehash):                # check if any of the parameter in filehash is a file path
                filedata = get_file_data(filehash)      # get the file hash
                filehash = filedata["hash"]
                DB_error = insert_file_data(filedata)
            elif not os.path.isfile(filehash):          # if parameter is not a legit file path
                if (is_hex(filehash)):
                    DB_error = insert_hash_file(filehash)
                else:
                    filehash = "Hash not found"

            pass
        except IOError as e:
            print(e.errno)
            pass
        except EOFError as e:
            print(e.args)
            pass
        except ValueError as e:
            print(e.args)
            pass
    if (DB_error == 0):
        jsonresp = api_request(key, filehash)
    else:
        jsonresp = None
    return jsonresp


def main():         # executed when script is run directly
                    # function accepts command line parameters
    try:
        opts, args = getopt.getopt(sys.argv[1:], "k:l:h", )
        if len(opts) == 1:
            if opts[0][0] == "-h":
                usage()
            elif opts[0][0] == "-k":
                print("No file hash or file path supplied")
                sys.exit(0)
        elif (len(opts) > 1) and (len(opts) < 3):
            for x, y in opts:
                if x == "-k":
                    key = y
                if x == "-l":
                    filehash = y
            jsonresp = vtotal(key, filehash)
            print("JSON Response:")
            print(jsonresp)
        else:
            print("Incorrect number of arguments")
            usage()
    except getopt.GetoptError as err:
        print(err)
        sys.exit(-1)


if __name__ == '__main__':
    main()
    sys.exit(0)
